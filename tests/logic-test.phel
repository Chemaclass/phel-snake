(ns phel-snake-tests\logic-test
  (:require phel-snake\logic :refer [snake
                                     snake-reach-goal?
                                     grow-snake
                                     move-snake
                                     collision-with-board?
                                     get-from-list])
  (:require phel\test :refer [deftest is]))

(deftest test-move-snake
  (let  [s (snake :right 1 {:x 5 :y 5} [{:x 3 :y 5} {:x 4 :y 5}])]
    (is (= (snake :right 1 {:x 6 :y 5} [{:x 4 :y 5} {:x 5 :y 5}])
           (move-snake s nil)) "Keep the old direction if nil")
    (is (= (snake :left 1 {:x 4 :y 5} [{:x 4 :y 5} {:x 5 :y 5}])
           (move-snake s :left)))
    (is (= (snake :right 1 {:x 6 :y 5} [{:x 4 :y 5} {:x 5 :y 5}])
           (move-snake s :right)))
    (is (= (snake :up 1 {:x 5 :y 4} [{:x 4 :y 5} {:x 5 :y 5}])
           (move-snake s :up)))
    (is (= (snake :down 1 {:x 5 :y 6} [{:x 4 :y 5} {:x 5 :y 5}])
           (move-snake s :down)))))

(deftest test-grow-snake-right
  (is (=             (snake :right 1 {:x 4 :y 5} [{:x 4 :y 5} {:x 5 :y 5}])
         (grow-snake (snake :right 1 {:x 5 :y 5} [{:x 3 :y 5} {:x 4 :y 5}])))))

(deftest test-snake-reach-goal?
  (let [goal {:x 2 :y 2}]
    (is (false? (snake-reach-goal? {:head {:x 1 :y 1}} goal)))
    (is (true? (snake-reach-goal? {:head {:x 2 :y 2}} goal)))))

(deftest test-collision-with-board?
  (let [board {:width 10 :height 10}]
    (is (false? (collision-with-board? board  {:head {:x 5 :y 5}})))
    (is (true?  (collision-with-board? board {:head {:x 5 :y 0}})) "collision on top")
    (is (true?  (collision-with-board? board {:head {:x 5 :y 9}})) "collision on right")
    (is (true?  (collision-with-board? board {:head {:x 10 :y 5}})) "collision on bottom")
    (is (true?  (collision-with-board? board {:head {:x 0 :y 5}})) "collision on left")))

(deftest test-get-from-list
  (is (= 10 (get-from-list [] "key" 10)) "empty args results in default value")
  (is (= 10 (get-from-list ["unknown=2"] "key" 10)) "unknown key results in default value")
  (is (= 5 (get-from-list ["unknown=2" "key=5"] "key" 10)) "defined key results in defined value"))
