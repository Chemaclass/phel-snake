(ns phel-snake\logic)

(def- key-left-arrow "1b5b44")
(def- key-down-arrow "1b5b42")
(def- key-right-arrow "1b5b43")
(def- key-up-arrow "1b5b41")

(def- directions
  {key-left-arrow :left
   key-down-arrow :down
   key-right-arrow :right
   key-up-arrow :up})

(defn normalize-next-direction [in]
  (directions in))

(defn grow-snake [snake]
  (let [sn1 (case (snake :direction)
              :left (update-in snake [:head :x] dec)
              :right (update-in snake [:head :x] inc)
              :up (update-in snake [:head :y] dec)
              :down (update-in snake [:head :y] inc))]
    # add head to the tail
    (update sn1 :tail |(push $ (snake :head)))))

(defn move-snake [snake next-direction]
  (if (nil? next-direction)
    (recur snake (snake :direction))
    (let [sn1 (case next-direction
                :left (update-in snake [:head :x] dec)
                :right (update-in snake [:head :x] inc)
                :up (update-in snake [:head :y] dec)
                :down (update-in snake [:head :y] inc))
          # remove the last tail position
          sn2 (update sn1 :tail |(slice $ 1))
          # add head to the tail
          sn3 (update sn2 :tail |(push $ (snake :head)))]
      (merge sn3 {:direction next-direction}))))

(defn collision-with-board? [board snake]
  (or
   (>= 1 (get-in snake [:head :x]))
   (>= 0 (get-in snake [:head :y]))
   (= (board :width) (get-in snake [:head :x]))
   (= (dec (board :height)) (get-in snake [:head :y]))))

(defn generate-new-goal [{:width width :height height}]
  (let [pos {:x (dec (rand-int width))
             :y (dec (rand-int height))}]
    (if (or (<= (pos :x) 1)
            (>= (pos :x) (dec width))
            (<= (pos :y) 1)
            (>= (pos :y) (dec height)))
      (recur {:width width :height height})
      pos)))

(defn generate-snake-head [{:height height}]
  (generate-new-goal {:width 5 :height height}))

(defn- snake-reach-goal? [snake goal]
  (and
   (= (get-in snake [:head :x]) (goal :x))
   (= (get-in snake [:head :y]) (goal :y))))

(defn update-goal [snake goal board]
  (if (snake-reach-goal? snake goal)
    (generate-new-goal board)
    goal))

