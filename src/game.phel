(ns phel-snake\game
  (:use RuntimeException)
  (:require phel-cli-gui\terminal-gui :refer [add-output-formatter
                                              clear-screen
                                              clear-output
                                              clear-line
                                              read-input
                                              render-board
                                              render])
  (:require phel-snake\logic :refer [generate-new-goal
                                     normalize-next-direction
                                     move-snake
                                     update-goal
                                     collision-with-board?
                                     grow-snake]))

(add-output-formatter {:style-name "snake" :foreground "green" :background "black" :options ["bold"]})
(add-output-formatter {:style-name "goal" :foreground "magenta" :background "black" :options ["bold"]})

(def start-time (php/microtime true))
(def nano-seconds-delay 100000)
(def goal-icon {:text "A" :style "goal"})
(def snake-head-icon {:text "X" :style "snake"})
(def snake-tail-icon {:text "x" :style "snake"})

(defn sleep-delay [snake]
  (let [velocity (* (snake :speed) 15000)
        nano-sec (- nano-seconds-delay velocity)]
    (php/usleep nano-sec)))

(defn render-snake [snake]
  (let [head (snake :head)]
    (render (head :x) (head :y) (snake-head-icon :text) (snake-head-icon :style)))
  (for [t :in (snake :tail)]
    (render (t :x) (t :y) (snake-tail-icon :text) (snake-tail-icon :style))))

(defn render-goal [goal]
  (render (goal :x) (goal :y) (goal-icon :text) (goal-icon :style)))

(defn render-game-over [board snake]
  (let [game-over-text "GAME OVER"
        game-over-text-len (php/strlen game-over-text)
        x-center (php/round (- (/ (board :width) 2) (/ game-over-text-len 2)))
        y-center (php/round (/ (board :height) 2))]
    (render-snake snake)
    (render x-center y-center game-over-text)
    (render x-center (inc y-center) (format "Points: %d" (snake :speed)))
    (throw (php/new RuntimeException "So much fun!"))))

(defn playing-time []
  (let [diff-time (- (php/microtime true) start-time)]
    (format "Time: %d secs" (php/round diff-time))))

(defn render-stats [board snake]
  (clear-line (+ 2 (board :height)))
  (render 0 (+ 2 (board :height)) (format "Speed: %d" (count (snake :tail))))
  (clear-line (+ 3 (board :height)))
  (render 0 (+ 3 (board :height)) (playing-time)))

(defn debug-snake [board snake]
  (clear-line (+ 4 (board :height)))
  (render 0 (+ 4 (board :height)) (str "# snake" snake)))

(defn main []
  (clear-screen)
  (loop [board {:width 40 :height 20}
         snake {:direction :right
                :speed 1
                :head {:x 2 :y 2}
                :tail []}
         goal (generate-new-goal board)]

    (sleep-delay snake)
    (clear-output)
    (render-board board)

    (let [{:hex in} (read-input 3)
          next-direction (normalize-next-direction in)
          updated-goal (update-goal snake goal board)
          updated-snake (move-snake snake next-direction)]

      (if (collision-with-board? board snake)
        (render-game-over board snake))

      (render-snake updated-snake)
      (render-goal updated-goal)
      (render-stats board updated-snake)
      (debug-snake board updated-snake)

      (let [new-goal? (not= goal updated-goal)
            sn (if new-goal?
                 (update updated-snake :speed inc)
                 updated-snake)
            sn2 (if new-goal? (grow-snake sn) sn)]
        (recur board sn2 updated-goal)))))

(try
  (main)
  (catch RuntimeException e
    (println (php/-> e (getMessage)))))
