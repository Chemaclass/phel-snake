(ns phel-snake\game
  (:use RuntimeException)
  (:require phel-cli-gui\terminal-gui :as gui)
  (:require phel-snake\logic :as l))

(gui/add-output-formatter {:style-name "snake-head" :foreground "black" :background "red" :options ["bold"]})
(gui/add-output-formatter {:style-name "snake-tail" :foreground "black" :background "green" :options ["bold"]})
(gui/add-output-formatter {:style-name "goal" :foreground "black" :background "magenta" :options ["bold"]})

(def difficulty
  "The higher the faster it will increase the speed on each level."
  10000)

(def board-width (l/get-from-list argv "width" 42))
(def board-height (l/get-from-list argv "height" 22))
(def debug? (php/in_array "debug" argv))
(def nano-seconds-delay-base 140000)
(def start-time (php/microtime true))
(def goal-icon {:text " " :style "goal"})
(def snake-head-icon {:text " " :style "snake-head"})
(def snake-tail-icon {:text " " :style "snake-tail"})

(defn debug-snake [board snake]
  (if debug? (do (gui/clear-line (+ 3 (board :height)))
                 (gui/render 0 (+ 3 (board :height)) (str "# snake" snake)))))

(defn sleep-delay [snake]
  (let [velocity (* (snake :speed) difficulty)
        nano-sec (- nano-seconds-delay-base velocity)
        velocity-normalizer (case (snake :direction)
                              :left 2 :right 2
                              :up 1 :down 1)
        sleep-time (/ nano-sec velocity-normalizer)]
    (if debug? (do (println)
                   (println "# sleep-time:" sleep-time "| velocity-normalizer:" velocity-normalizer)
                   (println)(println)(println "playing...")))
    (php/usleep sleep-time)))

(defn render-snake [s]
  (for [t :in (s :tail)]
    (gui/render (t :x) (t :y) (snake-tail-icon :text) (snake-tail-icon :style)))
  (let [h (s :head)]
    (gui/render (h :x) (h :y) (snake-head-icon :text) (snake-head-icon :style))))

(defn clear-snake [s]
  (when-not (nil? (s :tail))
    (for [t :in (s :tail)]
      (gui/render (t :x) (t :y) " "))
    (let [h (s :head)]
      (gui/render (h :x) (h :y) " "))))

(defn render-goal [goal]
  (gui/render (goal :x) (goal :y) (goal-icon :text) (goal-icon :style)))

(defn render-game-over [board snake]
  (let [game-over-text "GAME OVER"
        game-over-text-len (php/strlen game-over-text)
        x-center (php/round (- (/ (board :width) 2) (/ game-over-text-len 2)))
        y-center (php/round (/ (board :height) 2))]
    (render-snake snake)
    (debug-snake board snake)
    (gui/render x-center y-center game-over-text)
    (gui/render x-center (inc y-center) (format "Points: %d" (snake :speed)))
    (throw (php/new RuntimeException "\n\nSo much fun!"))))

(defn playing-time []
  (let [diff-time (- (php/microtime true) start-time)]
    (format "Time: %d secs" (php/round diff-time))))

(defn render-stats [board snake]
  (println (format "Speed: %d" (count (snake :tail))))
  (println (playing-time)))

(defn main []
  (gui/clear-screen)
  (loop [b (l/board board-width board-height)
         s {:old {}
            :new (l/snake :right 1 (l/generate-snake-head b) [])}
         g (l/generate-new-goal b)]

    (sleep-delay (s :new))
    (gui/clear-output)
    (gui/render-board b)

    (let [{:hex in} (gui/read-input 3)
          next-direction (l/normalize-next-direction in)
          g2 (l/update-goal (s :new) g b)
          s2 (l/move-snake (s :new) next-direction)]

      (if (l/collision-with-board? b (s :new))
        (render-game-over b (s :new)))

      (clear-snake (s :old))
      (render-snake s2)
      (render-goal g2)
      (render-stats b s2)
      (debug-snake b s2)

      (let [new-goal? (not= g g2)
            s3 (if new-goal? (update s2 :speed inc) s2)
            s4 (if new-goal? (l/grow-snake s3) s3)]
        (recur b {:old (s :new) :new s4} g2)))))

(when-not *compile-mode*
  (try
    (main)
    (catch RuntimeException e
      (println)
      (println (php/-> e (getMessage))))))
