(ns phel-snake\game
  (:use RuntimeException)
  (:require phel-cli-gui\terminal-gui :as gui)
  (:require phel-snake\logic :as l))

(gui/add-output-formatter {:style-name "snake-head" :foreground "black" :background "red" :options ["bold"]})
(gui/add-output-formatter {:style-name "snake-tail" :foreground "black" :background "green" :options ["bold"]})
(gui/add-output-formatter {:style-name "goal" :foreground "black" :background "magenta" :options ["bold"]})

(def difficulty
  "The higher the faster it will increase the speed on each level."
  10000)

(def board-width (l/get-from-list argv "width" 42))
(def board-height (l/get-from-list argv "height" 22))
(def board-offset-width "TODO: Not implemented yet" (l/get-from-list argv "x" 0))
(def board-offset-height "TODO: Not implemented yet" (l/get-from-list argv "y" 0))

(def nano-seconds-delay-base 140000)
(def start-time (php/microtime true))
(def goal-icon {:text " " :style "goal"})
(def snake-head-icon {:text " " :style "snake-head"})
(def snake-tail-icon {:text " " :style "snake-tail"})

(def debug? (php/in_array "debug" argv))
(def good-mode? (php/in_array "good-mode" argv))
(def accelerate-counter "A counter to accelerate the sleeping render" (var 0))

(defn debug-snake [board snake]
  (if debug? (println (str "$ " board "\n$ " snake))))

(defn normalize-velocity [snake]
  (case (snake :direction)
    :left 2 :right 2
    :up 1 :down 1))

(defn sleep-delay [snake]
  (if (> (deref accelerate-counter) 0)
    (do (php/usleep 0) (set! accelerate-counter (dec (deref accelerate-counter))))
    (if good-mode?
      (php/usleep 140000)
      (let [velocity (* (snake :speed) difficulty)
            nano-sec (- nano-seconds-delay-base velocity)
            sleep-time (/ nano-sec (normalize-velocity snake))]
        (if debug? (println "# sleep-time:" sleep-time))
        (php/usleep sleep-time)))))

(defn render-snake [snake]
  (for [t :in (snake :tail)]
    (gui/render (t :x) (t :y) (snake-tail-icon :text) (snake-tail-icon :style)))
  (let [h (snake :head)]
    (gui/render (h :x) (h :y) (snake-head-icon :text) (snake-head-icon :style))))

(defn clear-snake [snake]
  (when-not (nil? (snake :tail))
    (for [t :in (snake :tail)]
      (gui/render (t :x) (t :y) " "))
    (let [h (snake :head)]
      (gui/render (h :x) (h :y) " "))))

(defn render-goal [goal]
  (gui/render (goal :x) (goal :y) (goal-icon :text) (goal-icon :style)))

(defn render-game-over [board snake]
  (let [game-over-text "GAME OVER"
        game-over-text-len (php/strlen game-over-text)
        x-center (php/round (- (/ (board :width) 2) (/ game-over-text-len 2)))
        y-center (php/round (/ (board :height) 2))]
    (render-snake snake)
    (debug-snake board snake)
    (gui/render x-center y-center game-over-text)
    (gui/render x-center (inc y-center) (format "Points: %d" (snake :speed)))
    (if debug? (gui/clear-line (+ 3 (board :height))))
    (throw (php/new RuntimeException))))

(defn playing-time []
  (let [diff-time (- (php/microtime true) start-time)]
    (format "Time: %d secs" (php/round diff-time))))

(defn render-stats [board snake]
  (println (format "Speed: %d" (count (snake :tail))))
  (println (playing-time)))

(def board (l/board board-offset-width board-offset-height board-width board-height))

(defn render-game [old-snake new-snake goal]
  (debug-snake board new-snake)
  (clear-snake old-snake)
  (render-snake new-snake)
  (render-goal goal)
  (render-stats board new-snake))

(defn main []
  (gui/clear-screen)
  (gui/render-board board)
  (println)
  (println)
  (println)

  (loop [snake {:old {}
                :current (l/snake :right 1 (l/generate-snake-head board) [])}
         goal (l/generate-new-goal board)]

  (println "playing...")
  (println "# good-mode?" good-mode?)
  (println "# Use <space-key> to accelerate-counter 1 sec the snake")

    (sleep-delay (snake :current))
    (gui/clear-output)

    (let [{:hex in} (gui/read-input 3)
          next-direction (l/normalize-next-direction in)
          goal2 (l/update-goal (snake :current) goal board)
          snake2 (l/move-snake (snake :current) next-direction)]

      (if (= in l/key-space)
        (set! accelerate-counter 3))

      (if (l/collision-with-board? board (snake :current))
        (render-game-over board (snake :current)))

      (render-game (snake :old) snake2 goal2)

      (let [new-goal? (not= goal goal2)
            snake3 (if new-goal? (update snake2 :speed inc) snake2)
            snake4 (if new-goal? (l/grow-snake snake3) snake3)]
        (recur {:old (snake :current) :current snake4} goal2)))))

(when-not *compile-mode*
  (try
    (main)
    (catch RuntimeException e
      (println)
      (println (php/-> e (getMessage))))))
