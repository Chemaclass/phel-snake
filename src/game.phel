(ns phel-snake\game
  (:use RuntimeException)
  (:require phel-cli-gui\terminal-gui :as gui)
  (:require phel-snake\logic :refer [generate-new-goal
                                     generate-snake-head
                                     normalize-next-direction
                                     move-snake
                                     update-goal
                                     collision-with-board?
                                     grow-snake]))

(gui/add-output-formatter {:style-name "snake-head" :foreground "black" :background "red" :options ["bold"]})
(gui/add-output-formatter {:style-name "snake-tail" :foreground "black" :background "green" :options ["bold"]})
(gui/add-output-formatter {:style-name "goal" :foreground "black" :background "magenta" :options ["bold"]})

(def difficulty
  "The higher the faster it will increase the speed on each level."
  10000)

(def debug? false)
(def nano-seconds-delay-base 140000)
(def start-time (php/microtime true))
(def goal-icon {:text " " :style "goal"})
(def snake-head-icon {:text " " :style "snake-head"})
(def snake-tail-icon {:text " " :style "snake-tail"})

(defn debug-snake [board snake]
  (if debug? (do (gui/clear-line (+ 3 (board :height)))
                 (gui/render 0 (+ 3 (board :height)) (str "# snake" snake)))))

(defn sleep-delay [snake]
  (let [velocity (* (snake :speed) difficulty)
        nano-sec (- nano-seconds-delay-base velocity)
        velocity-normalizer (case (snake :direction)
                              :left 2 :right 2
                              :up 1 :down 1)
        sleep-time (/ nano-sec velocity-normalizer)]
    (if debug? (do (println)
                   (println "# sleep-time: " sleep-time ", velocity-normalizer: " velocity-normalizer)
                   (println)(println)(println "playing...")))
    (php/usleep sleep-time)))

(defn render-snake [snake]
  (for [t :in (snake :tail)]
    (gui/render (t :x) (t :y) (snake-tail-icon :text) (snake-tail-icon :style)))
  (let [head (snake :head)]
    (gui/render (head :x) (head :y) (snake-head-icon :text) (snake-head-icon :style))))

(defn render-goal [goal]
  (gui/render (goal :x) (goal :y) (goal-icon :text) (goal-icon :style)))

(defn render-game-over [board snake]
  (let [game-over-text "GAME OVER"
        game-over-text-len (php/strlen game-over-text)
        x-center (php/round (- (/ (board :width) 2) (/ game-over-text-len 2)))
        y-center (php/round (/ (board :height) 2))]
    (render-snake snake)
    (debug-snake board snake)
    (gui/render x-center y-center game-over-text)
    (gui/render x-center (inc y-center) (format "Points: %d" (snake :speed)))
    (throw (php/new RuntimeException "\n\nSo much fun!"))))

(defn playing-time []
  (let [diff-time (- (php/microtime true) start-time)]
    (format "Time: %d secs" (php/round diff-time))))

(defn render-stats [board snake]
  (println (format "Speed: %d" (count (snake :tail))))
  (println (playing-time)))

(defn main []
  (gui/clear-screen)
  (loop [board {:width 42 :height 22}
         snake {:direction :right
                :speed 1
                :head (generate-snake-head board)
                :tail []}
         goal (generate-new-goal board)]

    (sleep-delay snake)
    (gui/clear-output)
    (gui/render-board board)

    (let [{:hex in} (gui/read-input 3)
          next-direction (normalize-next-direction in)
          updated-goal (update-goal snake goal board)
          updated-snake (move-snake snake next-direction)]

      (if (collision-with-board? board snake)
        (render-game-over board snake))

      (render-snake updated-snake)
      (render-goal updated-goal)
      (render-stats board updated-snake)
      (debug-snake board updated-snake)

      (let [new-goal? (not= goal updated-goal)
            sn (if new-goal?
                 (update updated-snake :speed inc)
                 updated-snake)
            sn2 (if new-goal? (grow-snake sn) sn)]
        (recur board sn2 updated-goal)))))

# TODO: Move to core? PR: https://github.com/phel-lang/phel-lang/pull/520
(defn contains-value?
  "Returns true if value is present in the given collection, otherwise returns false."
  [coll val]
  (let [php-array (to-php-array coll)
        flipped-array (php/array_flip php-array)
        flipped (php-array-to-map flipped-array)]
    (contains? flipped val)))

(if (true? (contains-value? argv "play"))
  (try
    (main)
    (catch RuntimeException e
      (println)
      (println (php/-> e (getMessage))))))
